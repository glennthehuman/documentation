[{"name":"Getting started","description":"Getting started with shopizer","path":"/starting","text":"","wordCount":0,"type":"TOC"},{"name":"What is Shopizer","description":"Shopizer is an open source e-commerce software licenced under Apache V2 licence","path":"/starting/whatisshopizer","text":"Shopizer is enterprise open source e-commerce software for retailers who want flexibility, speed and control of their commerce platform. Shopizer is a software solution that gives organizations the ultimate flexibility to take an experience-first approach to commerce, with simple powerful APIs and built in stores models.\n\nKey technical benefits\n\n  Built with Spring framework\n  Vulnerability checks\n  Open source and open standards\n  Cloud Ready: Deploy Shopizer in the public\n  or private cloud on Amazon Webservices (AWS), Microsoft\n  Azure or Google Cloud Platform (GCP)\n  Run on premise servers\n  Run from Docker containers\n  Run from any Java servlet containers\n\nShopizer is a an application composed of a set of services written in Java that serves functionality needed to build entreprise e-commerce systems.\n\nThe software can be used out of the box as a complete ready to use web application including a few web stores templates you can choose from. Shopizer can also be used as a restful backend application for serving a whole set of commerce REST apis on which you can build your own tailored e-commerce front store.\n\nShopizer e-commerce system provides the following functionality:\n  Catalog management\n  Shopping cart\n  Content management\n  Marketing components\n  Smart pricing\n  Ordering\n  Payment\n  Shipping\n\n  |Scope|Features|\n|--- |--- |\n|Software|Supports MySQL|\n||Supports H2|\n||Java - Spring Boot|\n||REST API|\n||Cloud centric|\n||Container based|\n||Open source Apache v2 licence|\n|Catalog management|SKU based product management|\n||One to many prices per item|\n||Simple time based promotion|\n||Complex promotions (Based on JBoss Drools)|\n||Category hierarchy|\n||Product options|\n||Custom product properties|\n||B2C|\n||B2B|\n||C2C|\n||Multiple stores|\n|Promotions|Promotions applicable at item level|\n||Promotions applicable at cart level|\n|Customer management|Self serve customer entry point|\n||Social authentication|\n||Customer registration|\n||Rule based engine|\n||Multiple currency|\n|Ordering|Multiple payment modules|\n||Multiple shipping modules|\n||Promotions based on shipping rules|\n||Promotions based vatious property (quantity of items, customer...)|\n|REST API|Administration api|\n||Commerce api|\n||Customerapi|\n||Search|\n|Search|Based on Elastic Search|\n||Search items|\n||Search autocomplete|\n|Languages|Our language translator converts to multiple language|\n\nSee also\n\nShopizer architecture","wordCount":276,"type":"Content"},{"name":"Shopizer architecture","description":"Shopizer architecture","path":"/starting/architecture","text":"Services\n\nShopizer implements B2B, B2C and C2C functionality offering the following services\n\nCatalog management\nUser management\nCustomer management\nContent management\nOrder management\nPricing management\nShopping cart management\nConfiguration management\nShipping\nPayment\nPromotions\nSearch\n\nTechnology stack is built on Java (requires java 8), Spring Boot (Core, Security, DATA JPA), JBoss Drools rules engine, Elastic Search and cloud services offered by GCP and AWS for infrastructure, storage and security.\n\nShopizer high level architecture\n\nShopizer high level architecture\n\nShopizer is a platform aiming to provide services, tools and connectors for building your own commerce cloud or on premise commerce application.\n\nServices are built using Spring Framework providing packages for building enterprise applications. Shopizer persistence uses JPA for connecting to MySQL and has extensions for Google FirebaseNoSQL database and a set of interfaces for connecting to other external data sources.\n\nShopizer supports integration with external payment and shipping modules such as Stripe, Fedex, Braintree, USPS and more. A set of modules extensions allows using various content management storage such as JBoss Infinispan, AWS S3 and external web servers such as NGINX or Apache server. Elastic tools provide searching functionality.\n\nA REST api exposes all commerce functionality (B2C, B2B, C2C, Multi-Stores) as well as complete system administration. Spring Security configured of the box with JWT Bearer token authentication provides application interface authentication and authorization.\n\nMain foundation technology\n\n|  |  |\n|----------------|:---------:|\n| Spring Boot Shopizer is based on Spring Boot which makes it easy to create stand-alone, production-grade Applications that you can \"just run\". | SpringBoot |\n| Spring Security Shopizer is also based on Spring Security which is a framework that focuses on providing both authentication and authorization to Java applications. | SpringSecurity |\n| Spring Data JPA Data access is implemented using Spring Data JPA which makes easy data operations in a Java application. | Spring Data JPA |\n| Elastic search Search functionality is built on Elastic Search a tool for searching, analyzing, and visualizing commerce data data Elastic Search which makes easy data operations in a Java application. | Spring Data JPA |\n\nShopizer components\n\nShopizer components\n\nThe Component Model describes the entire hierarchy of components in terms of their responsibilities, their interfaces, their (static) relationships, and the way they collaborate to deliver required functionality.\n\nA component is a relatively independent part of a system. It is characterized by its responsibilities and eventually by the interface(s) it offers. Components can be decomposed into smaller components or composed into  arger components.\n\nCore\n\nSpring Data JPA (entity, repositories)\nServices\nRules (static and dynamic)\n\nModel\n\nEntity\n\nModules\n\nInterfaces\nInternal modules\nExternal modules\n\nShop\n\nController\nSecurity\nAPI\nFa√ßade\nDTOs\n\nSee also\n\nWhat is Shopizer\nBeginning with Shopizer\n","wordCount":392,"type":"Content"},{"name":"Beginning with Shopizer","description":"Everything has a starting point","path":"/starting/starting","text":"Quick startup\n\nShopizer comes pre-configured with an embedded database (H2) and a demonstration store already configured for evaluation purpose. Shopizer can be downloaded from Github and run with a few commands as a starting point.\n\nGet Shopizer source code\n\n2 options are possible for getting Shopizer source code. First one is by using Git client if git software is installed on your computer or by downloading zip file from GitHub when you don't have git software installed\n\nClone shopizer using git command line\n\nIn order to perform this, you must have a git client installed on your workstation.\n\n$ git clone https://github.com/shopizer-ecommerce/shopizer.git\n\nThis will clone default Shopizer branch\n\nDownload Shopizer zip file from Git Hub\n\nShopizer download link\n\nRequirements\n\nShopizer is built using Java and requires Java Development Kit version 8 installed. First step is to check if java is installed. For this open a shell or command line.\n\n$ java -version\n\nIn order to build Shopizer you should have a complete Java SDK (software development kit) available on your machine. In order to verify if java sdk is installed on your computer use this command:\n\n$ javac\n\nYou should see which version of java is installed and if a SDK is available. Version 8 of java SDK is required and can be downloaded from here Java version 8\n\nFor any questions on software requirements and download process feel free to ask questions on Shopizer Forum\n\nSee Shopizer forum for asking Shopizer requirements related questions.\n\nSee also\n\nWhat is Shopizer\nBuild and run locally","wordCount":234,"type":"Content"},{"name":"Build and run locally","description":"Build and run on your local machine","path":"/starting/buildandrunlocally","text":"Run locally\n\nThe purpose of this section is to provide new users with the basics of Shopizer e-commerce framework in order to get started in their projects. It will walk the reader through the steps of installing and configuring Shopizer as well as running demo application locally.\n\nBuild Shopizer\n\nFrom a terminal or console\n\ncd shopizer\n\nBuild using Maven\n\nmvnw clean install\n\nThis command should result in a success message. If you have any errors during this process and require assistance,feel free to use Shopizer forum. See Shopizer forum for asking or searching Shopizer build related questions.\n\nStart Shopizer\n\ncd sm-shop\nmvnw spring-boot:run\n\nOnce terminal or console displays that Shopizer is running and listening on service port and ready to be used.\n\nOpen a browser and tpe url http://localhost:8080\n\nThis will open Shopizer demo store. In order to open administration tool type url http://localhost:8080/admin. You can login admin tool with user admin@shopizer.com and password password\n\nAnother alternative to run Shopizer locally is to run the application from latest Docker image.\n\nSee also\n\nBeginning with Shopizer\nRun from Docker image","wordCount":162,"type":"Content"},{"name":"Technical documentation","description":"Shopizer technical documentation","path":"/starting/documentation","text":"Configuration\n\nRequired configurations\nDatabase configuration\nSearch configuration\n\nModules\n\nPayment modules\nShipping modules\n\nLanguages\n\nLanguages files\nNew translation\n","wordCount":8,"type":"Content"},{"name":"Run from Docker image","description":"Run latest Shopizer container","path":"/starting/docker","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Run in the cloud","description":"Run Shopizer in various clouds","path":"/starting/cloud","text":"AWS\n\nSimple LightSail (VM) with SSL\nSimple LightSail (VM) with managed SQL\nEC2 with load balancer and managed SQL\nECS (Elastic Container Service)\nEKS (Kubernetes)\n\nGoogle Cloud Platform\n\nOpenShift","wordCount":22,"type":"Content"},{"name":"Contribute to Shopizer","description":"We are looking for your expertise","path":"/starting/contribute","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shopizer configuration","description":"Shopizer configuration","path":"/documentation","text":"","wordCount":0,"type":"TOC"},{"name":"Required configurations","description":"In order to have complete e-commerce experience, this section describes all required Shopizer configurations","path":"/documentation/configuration","text":"Understanding configurations\n\nFor having the best e-commerce experience Shopizer requires a set of configurations including api keys and different pointers that can be used at runtime to provide functionality such as content management, sending emails, getting shipping quotes, displaying maps etc...\n\nThose configurations use underlying api keys and subsystem configurations that require to be created prealabely. Those configurations are not mandatory and Shopizer will work with reduced features if not configured.\n\nExternal configurations\n\nGoogle Maps API\nGoogle Places API\nAWS SES (Simple Email Service)\nGoogle reCaptcha API\nAWS S3 Bucket\nGoogle Bucket\n\nWhat are those configurations used for\n\n|Scope           |Provider                       |Description                                           |\n|----------------|-------------------------------|------------------------------------------------------|\n|Contact us      |Google Maps API                |Display a Map containing store location               |\n|Contact us      |Google reCaptcha API           |' I am not a Robot ' - Contact Form                   |\n|Contact Us      |Send emails from contact us    |Use AWS SES service for sending emails                |\n|Shipping quote  |Google Geocoder API            |Determine shipping distance                           |\n|Order           |Google Places API              |Validate customer shipping address                    |\n|Order           |Google Maps API                |Display customer shipping location                    |\n|Order           |Send order emails              |Use AWS SES service for sending emails                |\n|Content         |Content images on AWS          |Use S3 buckets and cloudfront to serve images         |\n|Content         |Content images on GCP Buckets  |Use GCP buckets and cloudfront to serve images        |\n\nHow to get those configurations\n\nGoogle Maps API, Geocoding API, Places API\n> Get Google MAPS, Geocoding and Places API keys\n> Follow instructions for Getting a Key (* Requires Google Cloud Account)\n\nEnabling 3 apis\n   Maps javascript API\n   Geocoding API\n   Places API\n\nGoogle APIs diagram\n\nThen once apis are enabled keep keys aside to configure Shopizer\n\nGoogle keys diagram\n\nGoogle Places API\n\n> See procedure above\n\nGoogle Geocoder API\n\n> See procedure above\n\nGoogle reCaptcha\n\n> Get reCaptcha API keys\n> Register new keys here\n\nRegister your domains and subdomains but aslo localhost for testing the solution\n\nAWS S3 Bucket\n\nInfinispan is the technology used out of the box for managing images and files from a ingle instance of Shopizer. This solution works fine when working with Single instance and low to mid size traffic but would not scale for large traffic size or to serve multiple Shopizer running instances.\n\nOur recommendation for being able to manage images and files at scal is to use cloud based file management and use Cloudfront technology for serving files faster to visitors from any location.\n\nCration of S3 bucket and Cloudfront distribution requires an AWS account.\n\n>See this instruction video for creating an S3 bucket and a Cloudfront distribution on AWS\n\nGoogle GCP Bucket\n\nGoogle Cloud Platform (GCP) also offers bucket and cloudfront technology for scaling images and files distribution.\n\nCreation of buckets and cloudfront requires a GCP account.\n\n>See this instruction video for creating abucket and a Cloudfront distribution on GCP\n\nShopizer configuration files\n\nShopizer configuration files are located in\n\nshopizer/sm-core/src/main/resources/shopizer-core.properties\n\nSpecific configuration files also exist for each profile\n\nshopizer/sm-core/src/main/resources/profiles/.../shopizer-core.properties\n\nWhich CMS method to use [ default | httpd | aws | gcp ]\ndefault = infinispan\nhttpd = requires http server\naws = AWS S3 -> See AWS S3 configuration below\ngcp = Google Cloud Storage\n\nconfig.cms.method=aws\n\n#AWS S3 configuration\n#Name of bucket files\n#Credentials must be set as environment variables when launching Shopizer\n#AWSACCESSKEY_ID=\n#AWSSECRETEACCESS_KEY=\nconfig.cms.contentUrl=AWSBUCKETURL\nconfig.cms.aws.bucket=AWS_BUCKET\nconfig.cms.aws.region=AWSBUCKETREGION\n\n#GCP Cloud Storage configuration\n#Name of the bucket file\n#If the bucket does not exists it will be created\n#export GOOGLEAPPLICATIONCREDENTIALS=\"/home/user/Downloads/[FILE_NAME].json\"\nconfig.cms.gcp.bucket=GCP_BUCKET\n\n#You need an AWS access key ID and AWS secret access key to access Amazon SES using an SDK\n#AWS keys need to be specified in environment variables\n#Email implementation [default | ses]\n#default=SpringHtmlEmailSender - through SMTP server and requires configurations from admin console\n#ses=AWS SES service\nconfig.emailSender=default\nconfig.emailSender.region=USEAST1\n\n#Google map API key\nconfig.shippingDistancePreProcessor.apiKey=GOOGLEMAPSKEY\n\n#checkout and signup address validation\nconfig.googleMapsKey=GOOGLEMAPSKEY\n\n#recaptcha https://developers.google.com/recaptcha/\n#testing keys\nconfig.recaptcha.secretKey=RECAPTCHA_SECRETKEY\nconfig.recaptcha.siteKey=RECAPTCHA_SITEKEY\n\nOther configurations\n\nThere are other configuration keys requiring attention\n\nWhich CMS method to use [ default | httpd | aws | gcp ]\nconfig.cms.method=default\n\n#Shipping activated in the system ?\nconfig.displayShipping=true\n\nconfig.shippingDistancePreProcessor.acceptedZones=QC,ON,AB,NY,MA\n\n#shipping rules\nconfig.shipping.rule.priceByDistance=PriceByDistance.drl\nconfig.shipping.rule.shippingModuleDecision=ShippingDecision.drl\n\n|Key                                        |Description                                     |Valeur defaut      |\n|-------------------------------------------|------------------------------------------------|-------------------|\n|config.cms.method                          |                                                |                   |\n|config.displayShipping                     |Google reCaptcha API                            |' I am not a Robot |\n|config.shipping.rule.priceByDistance       |Send emails from contact us                     |                   |\n|config.shipping.rule.shippingModuleDecision|Send emails from contact us                     |                   |\n\n####AWS S3 Bucket + CloudFront for servig images\n\nRequirements:\n\nHave an AWS account\nHave AWS user access key and secret access key handy\n\nThis video is a tutorial on the configuration of S3 and CloudFront to work as content management underlying CMS for Shopizer. (Comming soon)\n\nBucket Policy\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"PublicReadGetObject\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::example-bucket/*\"\n            ]\n        }\n    ]\n}\n","wordCount":664,"type":"Content"},{"name":"Database configuration","description":"EXPLAIN","path":"/documentation/database","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Search configuration","description":"EXPLAIN","path":"/documentation/search","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Commerce software","description":"Shopizer software design","path":"/software","text":"","wordCount":0,"type":"TOC"},{"name":"Catalog functions","description":"Catalog functions described","path":"/software/catalog","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shopping cart functions","description":"Shopping cart functions described","path":"/software/cart","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Ordering functions","description":"Ordering functons described","path":"/software/order","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Customer functions","description":"Customer functons described","path":"/software/customer","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shopizer translation","description":"Translate to other lamguages","path":"/software/translation","text":"","wordCount":0,"type":"Content"},{"name":"Rules system","description":"Shopizer's rule system","path":"/software/rules","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shopizer modules","description":"Shopizer modules design","path":"/software/modules","text":"","wordCount":0,"type":"TOC"},{"name":"What are modules","description":"how to read the process documentation","path":"/software/modules/introduction","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shipping module","description":"how to create new Pages for the application","path":"/software/modules/shipping-modules","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Payment module","description":"how to create new Pages for the application","path":"/software/modules/payment-modules","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Database schema","description":"anything about process","path":"/databaseschema","text":"","wordCount":0,"type":"TOC"},{"name":"Process Introduction","description":"how to read the process documentation","path":"/databaseschema/introduction","text":"Available soon","wordCount":2,"type":"Content"},{"name":"New Pages HowTo","description":"how to create new Pages for the application","path":"/databaseschema/newPagesHowto","text":"Available soon","wordCount":2,"type":"Content"},{"name":"REST api","description":"commerce REST api explained","path":"/rest","text":"","wordCount":0,"type":"TOC"},{"name":"Swagger documentation","description":"REST api documentation generated by Swagger annotations","path":"/rest/swaggerdoc","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Handling REST errors","description":"REST errors format","path":"/rest/resterrors","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Creating new REST services","description":"This document explains how to create new REST services","path":"/rest/newrestservices","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Shopizer security","description":"Shopizer security explained","path":"/security","text":"","wordCount":0,"type":"TOC"},{"name":"Spring security","description":"Spring security and Shopizer","path":"/security/springsecurity","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Admin authentication","description":"Admin authentication explained","path":"/security/adminauth","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Customer authentication","description":"Customer authentication explained","path":"/security/customerauth","text":"Available soon","wordCount":2,"type":"Content"},{"name":"REST api authentication","description":"Authenticating through REST api","path":"/security/apiauth","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Deploying Shopizer","description":"Deploying Shopizer on premise and in the Cloud","path":"/deployment","text":"","wordCount":0,"type":"TOC"},{"name":"Deploy Shopizer on premise","description":"","path":"/deployment/onpremisedeployment","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Deploy Shopizer on AWS","description":"","path":"/deployment/clouddeployment","text":"Available soon","wordCount":2,"type":"Content"},{"name":"Deploy Shopizer on various clouds","description":"","path":"/deployment/cloud","text":"AWS\n\nSimple LightSail (VM) with SSL\nSimple LightSail (VM) with managed SQL\nEC2 with load balancer and managed SQL\nECS (Elastic Container Service)\nEKS (Kubernetes)\n\nGoogle Cloud Platform\n\nOpenShift","wordCount":22,"type":"Content"},{"name":"AWS Lightsail simple deployment","description":"AWS Lightsail simple deployment with Docker Compose, NGINX and Let's encrypt SSL","path":"/deployment/cloud/lightsail-simple","text":"This simple infrastructure allows running Shopizer on a simple AWS LightSail virtual maching. An Ubuntu based LightSail virtual machine will be configured with NGINX proxy server with SSL configured with Let's encrypt / Certbot SSL cerificate and Docker Compose running Shopizer, MySQL and ElasticSearch containers.\n\n> $\n> AWS LightSail\n> Linux / Unix - OS Only\n> Ubuntu 18.0.4 LTS\n> 4GB - 2vCPU - 80TB\n\nAWS LightSail VM diagram\n\nRequirements\nAWS Account\nA domain name with a registrar + access to DNS console\nHave Shopizer configurations handy\n\nInstallation instructions\n\nThe following section describes complete installation steps\n\nLightsail\n\n  In AWS Console\n    Create new LightSail instance\n    Select blueprint OS Only\n      select Ubuntu server from the list, last version available is preferable\n      click on 'Add launch script' and copy following script in the box in the text box\n\n#!/bin/bash\n\ninstall latest version of docker the lazy way\ncurl -sSL https://get.docker.com | sh\n\nmake it so you don't need to sudo to run docker commands\nusermod -aG docker ubuntu\n\ninstall docker-compose\ncurl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\ncopy the dockerfile into /srv/docker\nif you change this, change the systemd service file to match\nWorkingDirectory=[whatever you have below]\nmkdir /srv/docker\nsudo curl -o /srv/docker/docker-compose.yml https://raw.githubusercontent.com/shopizer-ecommerce/shopizer-docker-compose/master/docker-compose.yml?token=ACt88_ywRxm6UnvRw6mLOKOKgmfjG3h3ks5clpRIwA%3D%3D\n\ncopy in systemd unit file and register it so our compose file runs\non system restart\nsudo curl -o /etc/systemd/system/docker-compose-app.service https://raw.githubusercontent.com/shopizer-ecommerce/shopizer-docker-compose/master/docker-compose-app.service\n\nsudo chmod 755 /etc/systemd/system/docker-compose-app.service\nsudo systemctl enable docker-compose-app\n\nAll commands above simplify docker and docker compose installation. They also pull pre configured docker-compose file ready to run Shopizer's latest version\n\n  In AWS Console\n    Complete LightSail configuration\n      select an instance plan for a 4GB server (requires running the server, nginx, mysql and elastic)\n      ssh key pair create new\n      give a name to keypair (ie my-shopizer-lightsail)\n      download key and save pem file to a secure location\n      if you are on a mac or linux change mode on downloaded key file       create unique instance name (ie my-shopizer-docker-compose)\n      add key value tage Name = my-shopizer-docker-compose\n      click create instance\n\nInstall NGINX\n\nFrom AWS LightSail ssh console\n\nsudo apt update\nsudo apt install nginx\nsystemctl status nginx\n\nTest NGINX installation\n\ncurl http://localhost\n\nConfigure NGINX reverse proxy\n\nReverse proxy allows to proxy requests on port 80 and 443 to Shopizer running instance on port 8080\n\nsudo unlink /etc/nginx/sites-enabled/default\ncd /etc/nginx/sites-available\nsudo nano reverse-proxy.conf\n\nCopy those following lines in open for edit window\n\nserver {\n        listen 80;\n        listen [::]:80;\n        server_name carlsamson.ca;\n        access_log /var/log/nginx/reverse-access.log;\n        error_log /var/log/nginx/reverse-error.log;\n\n        location / {\n            proxy_pass http://localhost:8080;\n            proxysetheader X-Forwarded-For $proxyaddxforwardedfor;\n            proxysetheader X-Forwarded-Proto $scheme;\n        }\n}\n\nexit from nano and save (Ctrl X)\n\nCopy the configuration from /etc/nginx/sites-available to /etc/nginx/sites-enabled. It is recommended to use a symbolic link.\n\nsudo ln -s /etc/nginx/sites-available/reverse-proxy.conf /etc/nginx/sites-enabled/reverse-proxy.conf\n\nvalidate NGINX configuration\n\nsudo nginx -t\n\nPrevious command should not display any error\n\nrestart NGINX\n\nsudo systemctl restart nginx\n\nInstall Certbot on your instance\n\nCertbot installation commands from apt package manager\n\nsudo apt-get update\nsudo apt-get install software-properties-common\nsudo add-apt-repository ppa:certbot/certbot\nsudo apt-get update\nsudo apt-get install python-certbot-nginx\n\nNow run Certbot SSL configuration for NGINX. Make sure your domain points to AWS LightSail IP address before running next command. From your registrar configure DNS for a new A record or AAA record and point to your AWS instance IP address.\n\nsudo certbot --nginx\n\nOpen LightSail required ports\n\nLightsail\nOpen ports\n80\n443\n22\n","wordCount":476,"type":"Content"}]